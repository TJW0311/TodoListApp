<link rel="stylesheet" href="~/css/taskpage.css" />
@{
    var projectId = ViewBag.ProjectId;
}

@model TodoListApp.ViewModels.TaskListViewModel
    <h3 class="text-center mb-4">@ViewBag.ProjectName</h3>
    <span id="userRole" data-role="@ViewBag.CurrentUserRole" hidden></span>
    <hr class="mb-4" />
    <div class=" row">
        <div class ="col-md-2">
            <form asp-action="Filter" method = "post">
                <div class="mb-3">
                    <label class="form-label">Category:</label>
                    <select name="filter" class="form-select" asp-items="@(new SelectList(ViewBag.Categories,"CategoryId","Name",ViewBag.Filters.CategoryId))">
                    <option value="0">All</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Due:</label>
                    <select name="filter" class="form-select" asp-items="@(new SelectList(ViewBag.DueFilters,"Key","Value",ViewBag.Filters.Due))">
                        <option value = "all">All</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Priority:</label>
                    <select name="filter" class="form-select" asp-items="@(new SelectList(ViewBag.Priority,"PriorityId","Name",ViewBag.Filters.PriorityId))">
                        <option value="0">All</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Status:</label>
                    <select name="filter" class="form-select" asp-items="@(new SelectList(ViewBag.Status,"StatusId","Name",ViewBag.Filters.StatusId))">
                        <option value = "0">All</option>
                    </select>
                </div>

                <input type="hidden" name="searchType" value="@ViewBag.SearchType" />
                <input type="hidden" name="searchValue" value="@ViewBag.SearchValue" />
                <input type="hidden" name="sortBy" value="@ViewBag.SortBy" />
                <input type="hidden" name="sortDir" value="@ViewBag.SortDir" />

                <button type="submit" class="btn btn-primary">Filter</button>
                <a asp-action="Index" asp-route-id="" class="btn btn-primary">Clear</a>
            </form>
        </div>
        <div class ="col-md-10">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <form asp-action="Index" method="get" class="d-flex align-items-center gap-2">
                
                    <label for="searchType" class="form-label mb-0">Search by:</label>

                    <select id="searchType" name="searchType" class="form-select w-auto">
                        <option value="name" selected="@(ViewBag.SearchType == "name")">Name</option>
                        <option value="start" selected="@(ViewBag.SearchType == "start")">Start Date</option>
                        <option value="end" selected="@(ViewBag.SearchType == "end")">End Date</option>
                    </select>
                    <input type="hidden" name="projId" value="@ViewBag.ProjectId" />
                    <input id="searchValue" name="searchValue"
                           type="text"
                           class="form-control w-auto"
                           placeholder="Enter value"
                           value="@ViewBag.SearchValue" />

                    <input type="hidden" name="sortBy" value="@ViewBag.SortBy" />
                    <input type="hidden" name="sortDir" value="@ViewBag.SortDir" />

                    @if (!string.IsNullOrEmpty(ViewBag.SearchType) && !string.IsNullOrEmpty(ViewBag.SearchValue))
                    {
                        <a asp-action="Index"
                           class="btn p-0 border-0 bg-transparent"
                           style="box-shadow: none;"
                           title="Clear Search">
                            <i class="fas fa-times" style="color: #7d2ae8; font-size: 1.2rem;"></i>
                        </a>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary" title="Search">
                            <i class="fas fa-search"></i> Search
                        </button>
                    }
                </form>
                <!-- Export to Excel -->
                <button class="btn btn-primary" onclick="exportProjectTasks(@projectId)">
                    <i class="fas fa-download"></i> Export to Excel
                </button>
                <!-- Manage Members -->
                <button type="button" class="btn btn-primary" onclick="openManageMembers(@projectId)">
                    Manage Members
                </button>
                <!-- Add New Task Button -->
                <a asp-action="Add" class="btn btn-primary">Add New Task</a>
            </div>
            <div id="task-table-container">@Html.Partial("_TaskTable", Model)</div>
        </div>
    </div>
</div>

@* Edit Info Popup *@
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="editForm" asp-action="Edit" method="post"
                asp-route-filterId="@ViewBag.Filters.FilterString"
                asp-route-sortBy="@ViewBag.SortBy"
                asp-route-sortDir="@ViewBag.SortDir"
                asp-route-searchType="@ViewBag.SearchType"
                asp-route-searchValue="@ViewBag.SearchValue">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="id" id="edit-id" />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input name="Name" id="edit-name" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input name="Description" id="edit-description" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select name="CategoryId" id="edit-category" class="form-select">
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category.CategoryId">@category.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" name="StartDate" id="edit-start" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Due Date</label>
                        <input type="date" name="DueDate" id="edit-due" class="form-control" />
                    </div>
                    <div class="task_priority">
                        <label class="form-label">Priority:</label>
                        <select name="PriorityId" id="edit-priority" class="form-select" asp-items="@(new SelectList(ViewBag.Priority,"PriorityId","Name"))">
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select name="StatusId" id="edit-status" class="form-select">
                            @foreach (var status in ViewBag.Status)
                            {
                                <option value="@status.StatusId">@status.Name</option>
                            }
                        </select>
                        <div id="statusNotice" class="form-text text-warning mt-1" style="display: none;"></div>
                    </div>
                    <div class="mb-3 task_member">
                        <label class="form-label">Assign To:</label>
                        <select name="AssignedToUserId" id="edit-assignto" class="form-select" asp-items="ViewBag.Members">
                        </select>
                    </div>
                </div>
            </form>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="editForm" id="save-edit" class="btn btn-primary">Save Changes</button>

                <form id="deleteForm" asp-action="Delete" method="post" class="d-inline">
                    <input type="hidden" name="id" id="delete-id" />
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this task?');">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </form>
            </div>
            
        </div>
    </div>
</div>

<div id="manageMembersModalContainer">
    <div class="modal fade" id="manageMemberModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content" id="manageMembersContent">
                <!-- Content loaded by AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Slimulated Progress Modal for Export Excel -->
<div class="modal fade" id="exportProgressModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content p-3">
            <h6 class="text-center mb-2">Exporting Excel...</h6>
            <div class="progress mb-2">
                <div id="exportProgressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                     style="width: 0%">
                    0%
                </div>
            </div>
            <div class="text-center">
                <button type="button" class="btn btn-sm btn-outline-danger" id="cancelExportBtn">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/EditPopupStatusDropdownLogic.js" asp-append-version="true"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const editForm = document.getElementById("editForm");

        editForm.addEventListener("submit", function (e) {
            const start = new Date(document.getElementById("edit-start").value);
            const due = new Date(document.getElementById("edit-due").value);

            if (start > due) {
                e.preventDefault();
                alert("❗ Start Date must be before or equal to Due Date.");
            }
        });
    });

    // set value to the input for popup edit
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".task-row").forEach(row => {
            row.addEventListener("click", function () {
                const taskId = this.dataset.id;

                fetch(`/Home/GetTaskDetails?id=${taskId}`)
                    .then(response => response.json())
                    .then(task => {
                        if (task) {
                            document.getElementById("edit-id").value = task.id;
                            document.getElementById("edit-name").value = task.name;
                            document.getElementById("edit-description").value = task.description;
                            document.getElementById("edit-category").value = task.categoryId;
                            document.getElementById("edit-start").value = task.startDate;
                            document.getElementById("edit-due").value = task.dueDate;
                            document.getElementById("edit-priority").value = task.priorityId;
                            document.getElementById("edit-status").value = task.statusId;
                            document.getElementById("edit-assignto").value = task.assignedToUserId;

                            // also set delete ID
                            document.getElementById("delete-id").value = task.id;
                            clearAllValidation(fields);
                            updateEditStatusDropdown(task.priorityId, task.statusId);
                        }
                    });
            });
        });

        const form = document.getElementById("editForm");
        const saveBtn = document.querySelector('[form="editForm"]');
        const fields = {
            name: document.getElementById("edit-name"),
            description: document.getElementById("edit-description"),
            category: document.getElementById("edit-category"),
            start: document.getElementById("edit-start"),
            due: document.getElementById("edit-due"),
            priority: document.getElementById("edit-priority"),
            status: document.getElementById("edit-status"),
            assignee: document.getElementById("edit-assignto")
        };

        function validateField(field, condition, message) {
            const parent = field.parentElement;
            const existing = parent.querySelector(".text-danger");

            if (!condition) {
                field.classList.add("is-invalid");
                if (!existing) {
                    const error = document.createElement("div");
                    error.className = "text-danger small mt-1";
                    error.innerText = message;
                    parent.appendChild(error);
                }
                return false;
            } else {
                field.classList.remove("is-invalid");
                if (existing) existing.remove();
                return true;
            }
        }

        function validateAllFields() {
            let valid = true;

            valid &= validateField(fields.name, fields.name.value.trim() !== "", "Please enter task name.");
            valid &= validateField(fields.description, fields.description.value.trim() !== "", "Please enter description.");
            valid &= validateField(fields.category, fields.category.value, "Please select a category.");
            valid &= validateField(fields.start, fields.start.value, "Please select a start date.");
            valid &= validateField(fields.due, fields.due.value, "Please select a due date.");
            valid &= validateField(fields.priority, fields.priority.value, "Please select priority.");
            valid &= validateField(fields.status, fields.status.value, "Please select status.");
            valid &= validateField(fields.assignee, fields.assignee.value, "Please select a user.");

            // Check if due >= start
            if (fields.start.value && fields.due.value) {
                const startDate = new Date(fields.start.value);
                const dueDate = new Date(fields.due.value);
                valid &= validateField(fields.due, dueDate >= startDate, "Due date cannot be earlier than start date.");
            }

            return !!valid;
        }

        function clearAllValidation(fields) {
            Object.values(fields).forEach(field => {
                const parent = field.parentElement;
                const error = parent.querySelector(".text-danger");

                field.classList.remove("is-invalid");
                if (error) error.remove();
            });
        }

        saveBtn.addEventListener("click", function (e) {
            if (!validateAllFields()) {
                e.preventDefault(); // stop form if invalid
            }
        });

        // Real-time validation
        Object.values(fields).forEach(field => {
            field.addEventListener("input", () => validateAllFields());
            field.addEventListener("change", () => validateAllFields());
        });
    });

    // Mark that a sort was clicked
    document.querySelectorAll('.sort-link').forEach(link => {
        link.addEventListener('click', () => {
            sessionStorage.setItem('showSortToast', 'true');
        });
    });

    // Check if sort toast should display
    window.onload = function () {
        const shouldShowToast = sessionStorage.getItem('showSortToast') === 'true';
        const toastMsg = "@TempData["SortToast"]";

        if (shouldShowToast && toastMsg) {
            const toast = document.createElement("div");
            toast.innerText = "@TempData["SortToast"]";
            toast.style.position = "fixed";
            toast.style.bottom = "30px";
            toast.style.right = "30px";
            toast.style.padding = "15px 25px";
            toast.style.backgroundColor = "#7d2ae8";
            toast.style.color = "white";
            toast.style.borderRadius = "5px";
            toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.3)";
            toast.style.zIndex = "9999";
            toast.style.opacity = "0.85";
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);

            // Clear the flag
            sessionStorage.removeItem('showSortToast');
        }
    };

    document.addEventListener("DOMContentLoaded", function () {
        const searchType = document.getElementById("searchType");
        const searchValue = document.getElementById("searchValue");

        function updateInputType() {
            const selected = searchType.value;
            if (selected === "name") {
                searchValue.type = "text";
                searchValue.placeholder = "Enter name";
            } else {
                searchValue.type = "date";
                searchValue.placeholder = "";
            }
        }

        searchType.addEventListener("change", updateInputType);
        updateInputType(); // run on page load
    });

    document.addEventListener("DOMContentLoaded", function () {
        const searchType = document.getElementById("searchType");
        const searchValue = document.getElementById("searchValue");

        function updateInputType() {
            const selected = searchType.value;
            if (selected === "name") {
                searchValue.type = "text";
                searchValue.placeholder = "Enter name";
            } else {
                searchValue.type = "date";
                searchValue.placeholder = "";
            }
        }

        searchType.addEventListener("change", updateInputType);
        updateInputType(); // Run on page load
    });

    //Pagination
    document.addEventListener("click", function (e) {
        if (e.target.classList.contains("pagination-link")) {
            e.preventDefault();

            const page = e.target.getAttribute("data-page");
            const id = e.target.getAttribute("data-id");
            const sortBy = e.target.getAttribute("data-sortby");
            const sortDir = e.target.getAttribute("data-sortdir");
            const searchType = e.target.getAttribute("data-searchtype");
            const searchValue = e.target.getAttribute("data-searchvalue");

            const urlParams = new URLSearchParams({
                page,
                id,
                sortBy,
                sortDir,
                searchType,
                searchValue
            });

            fetch(`/Home/Index?${urlParams.toString()}`, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
                .then(response => response.text())
                .then(html => {
                    document.getElementById("task-table-container").innerHTML = html;
                });
        }
    });

    function openManageMembers(projectId) {
        $.get(`/Home/ManageMembersPartial?projectId=${projectId}`, function (html) {
            $("#manageMembersContent").html(html);
            $("#manageMemberModal").modal("show");
        });
    }

    function showToast(message) {
        const toast = $('<div class="toast-message">' + message + '</div>');
        $("body").append(toast);
        toast.fadeIn(300).delay(2000).fadeOut(500, function () {
            $(this).remove();
        });
    }

    function exportProjectTasks(projectId) {
        // First check if tasks exist
        fetch(`/Home/CheckTasksExist?projectId=${projectId}`)
            .then(res => res.json())
            .then(result => {
                if (!result.exists) {
                    showToast("No tasks found to export.");
                    return;
                }

                // Proceed to show modal and export
                showExportModalAndStart(projectId);
            })
            .catch(() => {
                showToast("Failed to check task availability.");
            });
    }

    let exportAbortController = null; // global reference

    function showExportModalAndStart(projectId) {
        const modal = new bootstrap.Modal(document.getElementById("exportProgressModal"));
        const progressBar = document.getElementById("exportProgressBar");
        const cancelBtn = document.getElementById("cancelExportBtn");

        let percent = 0;
        progressBar.style.width = "0%";
        progressBar.textContent = "0%";
        modal.show();

        // Simulate fake progress
        const interval = setInterval(() => {
            if (percent < 95) {
                percent += Math.floor(Math.random() * 4) + 1;
                progressBar.style.width = percent + "%";
                progressBar.textContent = percent + "%";
            } else {
                clearInterval(interval);
                setTimeout(() => modal.hide(), 800);
            }
        }, 200);

        exportAbortController = new AbortController();

        fetch(`/Home/ExportTasksToExcel`, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: `projectId=${projectId}`,
            signal: exportAbortController.signal
        })
            .then(async response => {
                clearInterval(interval);
                exportAbortController = null;

                const contentType = response.headers.get("Content-Type");

                if (contentType.includes("application/json")) {
                    const result = await response.json();
                    modal.hide();
                    showToast(result.message || "Export failed.");
                    return;
                }

                progressBar.style.width = "100%";
                progressBar.textContent = "100%";

                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `Project_${projectId}_Tasks_${Date.now()}.xlsx`;
                document.body.appendChild(a);
                a.click();
                a.remove();

                setTimeout(() => modal.hide(), 500);
            })
            .catch(err => {
                clearInterval(interval);
                modal.hide();
                if (err.name === 'AbortError') {
                    showToast("Export cancelled by user.");
                } else {
                    showToast("Something went wrong during export.");
                }
            });

        // Cancel button logic
        cancelBtn.onclick = function () {
            if (exportAbortController) {
                exportAbortController.abort(); // abort fetch
                exportAbortController = null;
            }
            clearInterval(interval);
            modal.hide();
        };
    }

    // Reset Modal When It Closes
    document.getElementById("exportProgressModal").addEventListener("hidden.bs.modal", function () {
        const progressBar = document.getElementById("exportProgressBar");
        progressBar.style.width = "0%";
        progressBar.textContent = "0%";
    });
</script>